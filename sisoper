// Lab2_shm_final.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>

#define MAX_PEDIDOS 5
#define PEDIDO_LEN 64

// Estructura del pedido
typedef struct {
    int cliente_id;
    char pedido[PEDIDO_LEN];
    int estado; // 0: libre, 1: recibido, 2: preparado
} Pedido;

// Estructura completa de memoria compartida
typedef struct {
    Pedido cola[MAX_PEDIDOS];
    int head;  // índice del próximo pedido a atender
    int tail;  // índice donde el cliente escribe
} BufferCompartido;

#define SHM_KEY 0x1234
#define SEM_KEY 0x5678

// Semáforos: 0 = mutex, 1 = espacio disponible, 2 = pedidos disponibles
int sem_id;

// Función de inicialización de semáforos (solo cocina la llama)
void init_semaforos() {
    sem_id = semget(SEM_KEY, 3, IPC_CREAT | 0666);
    semctl(sem_id, 0, SETVAL, 1);         // mutex
    semctl(sem_id, 1, SETVAL, MAX_PEDIDOS); // espacios disponibles
    semctl(sem_id, 2, SETVAL, 0);         // pedidos disponibles
}

// Operación P (wait)
void sem_wait(int sem_num) {
    struct sembuf op = {sem_num, -1, 0};
    semop(sem_id, &op, 1);
}

// Operación V (signal)
void sem_signal(int sem_num) {
    struct sembuf op = {sem_num, +1, 0};
    semop(sem_id, &op, 1);
}

// Cliente: escribe pedido
void cliente(int id) {
    // Conectarse a la memoria compartida
    int shm_id = shmget(SHM_KEY, sizeof(BufferCompartido), 0666);
    if (shm_id == -1) {
        perror("shmget");
        exit(1);
    }
    BufferCompartido *buffer = (BufferCompartido *) shmat(shm_id, NULL, 0);

    // Conectarse a los semáforos
    sem_id = semget(SEM_KEY, 3, 0666);

    char comida[PEDIDO_LEN];
    printf("Cliente %d - Ingrese su pedido: ", id);
    fgets(comida, PEDIDO_LEN, stdin);
    comida[strcspn(comida, "\n")] = 0; // quitar salto de línea

    // Esperar a que haya espacio disponible
    sem_wait(1);

    // Tomar el mutex
    sem_wait(0);

    // Escribir el pedido en la cola
    Pedido *p = &buffer->cola[buffer->tail];
    p->cliente_id = id;
    strncpy(p->pedido, comida, PEDIDO_LEN);
    p->estado = 1; // recibido

    printf("Cliente %d - Pedido enviado: %s\n", id, comida);

    buffer->tail = (buffer->tail + 1) % MAX_PEDIDOS; // cola circular

    // Liberar el mutex
    sem_signal(0);

    // Señalar que hay un pedido disponible
    sem_signal(2);

    // Esperar a que el pedido sea preparado
    int mi_pedido_preparado = 0;
    while (!mi_pedido_preparado) {
        sem_wait(0); // mutex
        // Buscar en la cola mi pedido
        for (int i = 0; i < MAX_PEDIDOS; i++) {
            if (buffer->cola[i].cliente_id == id && buffer->cola[i].estado == 2) {
                mi_pedido_preparado = 1;
                printf("Cliente %d - ¡Pedido preparado!: %s\n", id, buffer->cola[i].pedido);
                // Una vez preparado, se podría limpiar si quieres
                buffer->cola[i].estado = 0;
            }
        }
        sem_signal(0);
        if (!mi_pedido_preparado) {
            usleep(100000); // dormir 100ms para no saturar CPU
        }
    }

    // Desvincular memoria compartida
    shmdt(buffer);
}

// Cocina: atiende pedidos
void cocina() {
    int shm_id = shmget(SHM_KEY, sizeof(BufferCompartido), IPC_CREAT | 0666);
    if (shm_id == -1) {
        perror("shmget");
        exit(1);
    }
    BufferCompartido *buffer = (BufferCompartido *) shmat(shm_id, NULL, 0);

    // Conectar a semáforos o inicializar si es primera vez
    sem_id = semget(SEM_KEY, 3, IPC_CREAT | 0666);
    init_semaforos(); // Inicializar semáforos (solo cocina)

    // Inicializar indices si quieres:
    buffer->head = 0;
    buffer->tail = 0;
    for (int i = 0; i < MAX_PEDIDOS; i++) {
        buffer->cola[i].estado = 0;
    }

    printf("Cocina iniciada. Esperando pedidos...\n");

    while (1) {
        // Esperar a que haya pedidos disponibles
        sem_wait(2);

        // Tomar el mutex
        sem_wait(0);

        Pedido *p = &buffer->cola[buffer->head];
        if (p->estado == 1) { // pedido recibido
            printf("Cocina - Procesando pedido de Cliente %d: %s\n", p->cliente_id, p->pedido);

            // Simular preparación
            sleep(2); // tiempo de cocina

            // Marcar como preparado
            p->estado = 2;
            printf("Cocina - Pedido preparado para Cliente %d\n", p->cliente_id);

            buffer->head = (buffer->head + 1) % MAX_PEDIDOS;
        }

        // Liberar el mutex
        sem_signal(0);

        // Señalar que hay espacio disponible
        sem_signal(1);
    }

    shmdt(buffer);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Uso: %s [cliente ID | cocina]\n", argv[0]);
        return 1;
    }

    if (strcmp(argv[1], "cocina") == 0) {
        cocina();
    } else {
        int id = atoi(argv[1]);
        cliente(id);
    }

    return 0;
}
